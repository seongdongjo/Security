#) web-was 연동
HTML파일이나 이미지와 같은 정적콘텐츠들은 WAS까지 거칠필요없이 웹서버만 통해서 바로 처리/응답하는 것이 빠르다.

아파치 -  톰캣 연동 동작 플로우
1. 아파치 웹서버의 httpd.conf에 톰캣 연동을 위한 설정을 추가하고 톰캣에서 처리할 요청을 지정한다.
2. 사용자의 브라우저는 아파치 웹서버에 접속하여 요청한다. (통상 80 port )
3. 아파치 웹서버는 사용자의 요청이 들어왔을때, 이 요청이 톰캣에서 처리되도록 지정된 요청인지 확인한다.
4. 톰캣에서 처리해야하 하는 경우 아파치 웹서버는 톰캣의 AJP 포트(통상 8009 port) 에 접속해 요청을 톰캣에게 전달한다. 
5. 톰캣은 아파치 웹서버로부터 요청을 받아 처리한 후, 처리 결과를 다시 아파치 웹서버에게 돌려준다.
6. 아파치 웹 서버는 톰캣으로 전달받은 처리 결과를 사용자에게 전송한다.  

---------------------
1. JK connector 설치
- 아파치가 설치된 경로의 modules 디렉터리에 mod_jk 파일을 위치시킨다. http.conf의 mod_jk.so위치와 동일해야한다.

여기서 mod_jk모듈이란
AJP프로토콜을 이용하여 톰캣과 연동하기 위해 만들어진 모듈이다.

2. 아파치에서 설정
workers.properties 파일 생성
- 연동할 톰캣의 정보(host,port,lbfactor(작업할당량) 등)

//톰캣이름 3개
worker.list=webmail, sysman, mobile  // 이름은 임의로 설정


worker.webmail.type=ajp13 
worker.webmail.host=localhost
worker.webmail.port=8009 //포트번호. 톰캣에서 설정한 포트와 일치해야함
worker.webmail.lbfactor=1 //서버밸런스 비율 


worker.sysman.type=ajp13
worker.sysman.host=localhost
worker.sysman.port=8019 // 포트중첩 불가. 

worker.mobile.type=ajp13
worker.mobile.host=localhost
worker.mobile.port=8019 // 포트중첩 불가. 

------------------------------------------------------
자, 위에서 workers.properties 파일 생성했으면
아파치가 실행할때 참조하는 httpd.conf파일에 이를 명시해주어야한다.

//httpd.conf파일

LoadModule jk_module /etc/apache2/modules/mod_jk.so
# mod_jk.so의 위치

JkWorkersFile /etc/apache2/conf/workers.properties
# workers 설정 파일 위치

JkLogFile /etc/apache2/logs/mod_jk.log
# 로그파일 위치

JkShmFile /etc/apache2/logs/mod_jk.shm
# Load balancing workers will not function properly 오류 대응, httpd의 권한


JkMount /*.jsp webmail
JkMount /*.do webmail
JkMount /sysman/* sysman
JkMount /mobile/* mobile
------------------------------------------------------
#) JkMount는 해당 URL로 오면 어떤 worker(톰캣)가 처리할 지 적으면된다.
#) 톰캣 설정 - server.xml
 - 아파치를 통해 80포트로 접속하기 때문에, 톰캣으로 직접접속하는 8080포트는 막아야한다(주석처리)
<!--
<Connector URIEncoding="UTF-8" connectiontimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443" server=" " maxPostZize="1-"/>
-->

  - AJP 커넥터 설정
  <!-- Define an AJP 1.3 Connector on port 8009 -->
  <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" address="localhost"/>

--------------------------------------------------------
#)AJP란
웹서버에서 받은 요청을 와스로 전달해주는 프로토콜이다.
즉, 아파치와 톰캣을 연동하기 위해서는 AJP를 통해 서로 통신을 한다.
아파치는 이를 사용하여 80포트로 들어오는 요청은 자신이 받고, 이 요청 중 서블릿을 필요로 하는 요청은 톰캣에게 전달하여 처리한다.-> jkMount설정
해당 ajp(프로토콜)는 다양한 WAS에서 지원한다. 예) 아파치, 톰캣, 제우스, 웹로직, 웹스피어,jboss 등
==============================================================================================
#)구조(즉, 아파치에 mod_jk.so가 있어야한다)

----정적데이터 처리---------             				동적데이터 처리                              
|  Apache 2.4          |  ajp:8009	 tomcat 9.0
|  module: mod_jk.so   |  ----->     mysql-connector5.1.4   ---->  mysql
|  OS: Centos7         |			 OS: Centos7
|-----------------------


#)mod_jk 다운로드 - mod_jk 모듈은 AJP프로토콜을 사용해 톰캣과 연동하기 위해 만들어진 모듈이다.
wget https://mirror.navercorp.com/apache/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.48-src.tar.gz


--------------------------
#) 아파치 설정 - workers.properties

worker.list=worker1   // 이름은 내 임의로 설정
worker.worker1.type=ajp13
worker.worker1.host=[톰캣 ip]
worker.worker1.port=8009 // 포트번호 톰캣에서 설정한 포트와 일치해야 한다.
worker.worker1.lbfactor=1 // 서버밸런스 비율

#) 설정파일에서 모듈적용 설정 (conf/httpd.conf 파일)

LoadModule jk_module /usr/local/apache/modules/mod_jk.so
	
		<IfModule jk_module>
			JkWorkersFile /usr/local/apache/conf/workers.properties
			JkLogFile /var/log/httpd/mod_jk.log
			JkLogLevel info
			JkLogStampFormat "[%a %b %d %H:%M:%S %Y]"
			JkMount /*.jsp worker1
		</IfModule>
=======================================================================
#)정적파일 - javascript, css, image, text, excel, pdf 등
#)동적파일 - jsp, php, asp 등(이용자에서 어떻게 접근하느냐에 따라 변경이 가능한 파일들의 집합)

#)웹서버종류에는 IIS, WebtoB, Nginx, jigsaw 등
=========================================================================
#)아파치와 톰캣으 연동하는 방법은 mod_jk, mod_proxy, mod_proxy_ajp를 이용한 방법이 있다.
  여기서 가장 많이 쓰이는 방법은 mod_jk이다.
 
mod_jk 란?
Apache와 Tomcat을 연동하기 위한 모듈이다. AJP 프로토콜을 이용하여 아파치로 들어온 요청을 톰캣에 전달하여 처리한다. 
아파치로 들어온 요청을 톰캣으로 전달 할때 AJP 포트 (기본 8009)를 사용하며 필요에 의한 포트 변경도 가능하다.

#)mod_jk 설치
톰캣 사이트(http://tomcat.apache.org/download-connectors.cgi)에 접속하여 리눅스용 파일을 다운로드 한다.
 - wget https://downloads.apache.org/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.48-src.tar.gz

 
tar -xvzf tomcat-connectors-1.2.48-src.tar.gz 압축을 풀면
tomcat-connectors-1.2.48-src 가 생긴다.

cd tomcat-connectors-1.2.48-src/native
yum install autoconf
yum install libtool
./buildconf.sh
./configure --with-apxs=/bin/apxs
make
make install

이 후에 /usr/lib64/httpd/modules/mod_jk.so 파일이 생성되어있으면 정상적으로 설치완료 된것이다.

#) /etc/httpd/conf/httpd.conf 설정


LoadModule jk_module modules/mod_jk.so

<VirtualHost *:80>
    ServerName localhost
    # 확장자 jsp, json, xml, do를 가진 경로는 woker tomcat으로 연결하는 구문.
    JkMount /*.jsp instance1
    JkMount /*.json instance1
    JkMount /*.xml instance2
    JkMount /*.do instance2
</VirtualHost>
 
<ifModule jk_module>
    # 워커 설정파일 위치
    JkWorkersFile conf/workers.properties
 
    # 로그 위치
    JkLogFile logs/mod_jk.log
 
    # 로그레벨 설정
    JkLogLevel info
 
    # 로그 포맷에 사용할 시간 형식을 지정한다.
    JkLogStampFormat "[%y %m %d %H:%M:%S] "
 
    # Our JK shared memory file
    JkShmFile logs/mod_jk.shm
    JkMountFile conf/uriworkermap.properties
</ifModule>

-------------------------------------------------
vi /usr/local/apache2/conf/workers.properties
 
#다음 내용을 추가
worker.list=instance1,instance2
 
worker.instance1.port=8009
worker.instance1.host=localhost
worker.instance1.type=ajp13
worker.instance1.lbfactor=1
 
worker.instance2.port=8109
worker.instance2.host=localhost
worker.instance2.type=ajp13
worker.instance2.lbfactor=1
-----------------------------------------------------
#)로드밸런스 설정
vim /usr/local/apache2/conf/uriworkermap.properties
 
#다음 내용을 추가
/*=balancer
 
vi /usr/local/apache2/conf/workers.properties
 
#다음 내용을 추가
worker.list=balancer
 
worker.instance1.port=8009
worker.instance1.host=localhost
worker.instance1.type=ajp13
worker.instance1.lbfactor=1
 
worker.instance2.port=8109
worker.instance2.host=localhost
worker.instance2.type=ajp13
worker.instance2.lbfactor=1
 
worker.balancer.type=lb
worker.balancer.balance_workers=instance1,instance2
worker.balancer.sticky_session=TRUE

위의 properties 파일에 내용을 추가해준 후 Tomcat 인스턴스들에게 JvmRoute 설정을 해준다. 이것에는 크게 두가지 방법이 있다. 
첫번째로는 System.property에 JVM_OPTS=" ${JVM_OPTS} -DjvmRoute=instance1" 를 추가해주는 방법이 있고, 
두번째로는 serverm.xml에 <Engine name="Catalina" defaultHost="localhost" jvmRoute="instance1">를 추가해주는 방법이 있다. 

================================================================
