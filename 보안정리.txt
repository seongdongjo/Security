#)클릭제킹 : 사용자의 클릭이 의도하지 않은 화면을 클릭하게 해서 사용자의 의도와 다른 이벤트를 발생
- 예를들어 광고레이어를 투명하게 만들어서 안보이게하고 클릭하면 광고페이지로 이동
//web.xml에 추가해서 해결
<filter>
        <filter-name>httpHeaderSecurity</filter-name>
        <filter-class>org.apache.catalina.filters.HttpHeaderSecurityFilter</filter-class>
        <init-param>
            <param-name>antiClickJackingOption</param-name>
            <param-value>SAMEORIGIN</param-value>
        </init-param>
    </filter>
-------------
#)CSRF 공격(Cross Site Request Forgery)은 인터넷사용자(희생자!!)가 자신의 의지와는 무관하게 공격자가 의도한대로(수정,삭제 등) 특정 웹사이트에
요청하게 만드는 공격이다. 즉, CSRF를 통해 해커는 희생자의 권한을 도용하여 중요 기능을 실행하는 것이 가능하다.
CSRF는 해커가 사용자의 컴퓨터를 감염시키거나 페이스북 서버를 해킹을 해서 이뤄지는 공격이 아니다.

#)XSS와 CSRF의 차이
XSS는 공격대상이 Client이고 CSRF는 Server이다.

#)XSS와 CSRF의 공통점
둘다 스크립트 공격이다.

XSS는 사용자가 특정웹사이트를 신용하는 점을 노림
CSRF는 특정 웹사이트가 사용자의 웹 브라우저를 신용하는 것을 노림

XSS는 사이트변조나 백도어를 통해 클라이언트에 대한 공격을한다.
CSRF는 요청을 위조하여 사용자의 권한을 이용해 서버에 대한 공격을한다.

CSRF는 일단 사용자가 웹사이트에 로그인한 상태에서 공격자가 등록한 조작된 요청정보를 담고있는 게시물을 열면
해당 웹사이트는 위조된 공격명령이 믿을 수 있는 사용자로부터 발송된 것으로 판단하게 되어 피해를 입는다.

XSS는 희생자 클라이언트 PC에서 실행되며 사용자의 정보를 탈취하는 것이고, CSRF는 위조된 요청을 서버에 보내어 서버단에서 스크립트가 실행됩니다.

XSS는
1. 취약점을 찾아서 세션 쿠키를 탈취하는 스크립트를 사이트에 삽입합니다.

2. 사용자가 그 웹사이트에 접근할 때마다 스크립트가 작동합니다

3. 스크립트를 통해 침입자에게 사용자의 세션 쿠키가 전달됩니다.
input 박스에 사용자가 <script>hello</script> 이렇게
그래서, 스크립트 태그를 필터링 할 필요가 있다. <는 &lt; 등으로 필터링을하면 
사용자에게는 <script>로 보이지만 실제는 &lt;script&gt; 로 브라우저에서는 일반문자로 인식되서 스크립트가 실행되지 않는다.


CSRF는
1. 침입자는 하이퍼링크에 자금 전송 요청에 대한 스크립트를 삽입하고 사이트에 로그인할 사람들에게 전송합니다.

2. 사용자는 링크를 누르고(외부링크), 의도치않게 서버로 요청을 보내게 됩니다.

3. 서버는 로그인 되어있는 사용자의 요청이기 떄문에 정상으로 인식하고 침입자에게 돈을 전송합니다.

CSRF는 사용자의 권한을 이용하여 게시물 작성에 <html> ~~<html> 이렇게 작성하는 방법과(기존 form id,value를 분석해서)
또는 공격자가 만든 사이트 링크를 보내서 공격하는 방법이있다.

GET을 이용한 공격방법(URL방법)
A라는 사이트에 비밀번호변경페이지에서 입력란이 NewPassword, Confirm Password만 있을경우 (기존비밀번호는 입력안할때)
만약에 A라는 사이트의 사용자 비밀번호 변경!!!!을 하는 경우 주소패턴이 abc.com/user.do?cmd=user_passwd_change&user=admin&newPwd=1234
라고하면 이러한링크를 사용자의 메일로보내서 읽게되면 비밀번호가 바뀐다.(관리자계정으로 로그인되있으면 관리자계정 비밀번호를 바꿀수있다) 
그래서 비밀번호 변경시에는 공격자가 기존 비밀번호를 모르기때문에 기존비밀번호입력란을 만들어서 공격을 방지할 수 있다.

POST를 이용한 공격방법(Form이용)
기존의 비밀번호 변경하는 페이지가 위에처럼 New, Confirm만 있다고 가정하에 그럼 form에 new, confirm 패스워드만 몰래 넣어서 action을 비밀번호 변경.do로 가면 변경이된다.
그래서 공격자는 form태그로 만든 게시물을 올려서(이것도 XSS취약점) 게시물을 사용자가 클릭하면 해당 계정은 비밀번호가 변경되는 것이다. -> 자동스크립트로인해
<script>
	document.forms[0].submit();
</script>



-------------
#)Application error disclosure(탐지된 오류 노출)
400(Bad Request), 401(Authorization Required), 403(Forbidden), 404(Not Found), 500(Internal Server Error) 등과 같이
웹 서버에서 오류가 발생할 경우 이에 대한 상세한 정보가 노출되는 경우에 탐지된다.

웹 브라우저에 에러페이지 뜨면서 톰캣버전, stacktrace를 통해 서비스의 내부 구조를 파악할 수 있다.

-------------
#)Directory Browsing(디렉토리 나열) 취약점
직접적인 공격 방법은 아니나 디렉토리 내의 파일목록을 노출시킴으로써 서비스 운영자가 노출을 원하지 않았던
파일들이 노출되고 서비스 구조파악에 도움을 줌으로써 공격에 도움이 될 수 있다.
디렉토리 나열 취약점으로 탐지된 URL을 웹 브라우저로 접속을 하면 디렉토리 구조가 보인다.

--------------
#)Session은 브라우저당 한개이다.(크롬,엣지 등)

예를들어 F12에서 보이는 JSession이다. 디버그를 돌리면 Session안에 Attributes 라는게 있다. 
거기서 CSRF_TOKEN을 key:value로 안에 쏙 넣은것이다.
즉 Session(4CDF~) { CSRF_TOKEN=5c~~, loginVO=~   }

if(request.getSession().getAttribute("CSRF_TOKEN").equals(param)) {
				
			}
if(param == null) {
		HttpSession session = request.getSession();
		session.setAttribute("CSRF_TOKEN", UUID.randomUUID().toString());
}


=============================================================================================
#)공개SW를 활용한 개발보안 점검가이드
개발자는 이클립스에 플러그인 된 Spotbugs, FindSecurityBugs, PMD를 활용하여 점검 후 형상관리서버에(SVN) 반영한다.

개발자 - 이클립스  ----(이클립스에 플러그인된 Spotbugs, FindSecurityBugs, PMD)   --- 수정후 아래 형상관리서버에 commit 

형상관리서버 
    |
	|
Jenkins
    |
    | (Jenkins에 플러그인된 Spotbugs, FindSecurityBugs, PMD)
	|
Spotbugs, FindSecurityBugs, PMD  ---- 분석 후 Jenkins가 받아서 전달


-------------------------
#)Spotbugs(FindBugs)
Spotbugs는 자바바이트코드를 분석하여 버그 패턴을 발견하는 정적분석 공개 소프트웨어이다.
Spotbugs에서 탐지가능한 오류들 
1. Bad practice : 클래스 명명규칙, null 처리 실수 등 개발자의 나쁜습관을 탐지
2. Correctness : 잘못된 상수, 무의미한 메소드 호출 등 문제의 소지가 있는 코드를 탐지
3. Dodgy code : int의 곱셈결과를 long으로 변환하는 등 부정확하거나 오류를 발생시킬 수 있는 코드를 탐지
4. Experimental : 메소드에서 생성된 stream이나 리소스가 해제하지 못한 코드를 탐지
5. Internationalization : Default 인코딩을 지정하지 않은 경우 등 지역특성을 고려하지 않은 코드 탐지
6. Malicious code vulnerability: 보안 코드에 취약한 가변적인 배열이나 콜렉션, Hashtable탐지
7. Multithreaded correctness : 멀티쓰레드에 안전하지 않은 객체 사용등을 탐지
8. Performance: 미사용필드, 비효율적 객체생성등 성능에 영향을 주는 코드 탐지
9. Security: CSS, DB 패스워드 누락 등 보안에 취약한 코드 탐지

설정은 Preferences - java - spotbugs에 있다. Detector configuration탭에서 검사항목 선택가능

----------------------------
#)FindSecurityBugs(동적)
spotbugs의 플러그인이다. OWASP TOP 10과 CWE를 커버하는 78개의 버그패턴 탐지 할수있다
부적절한 입력탐지, SQL Injection, XSS, 취약한 암호화 알고리즘, 취약한 URL Redirection 등

인터넷에서 https://find-sec-bugs.github.io/download.htm 여기서 plugin(jar파일)을 다운받으면된다.


------------------------------
#)PMD(정적분석)
Spotbugs는 자바바이트코드를 분석한다면 PMD는 소스코드를 분석하여 변수처리, catch block 등 탐지

preferences - PMD - run configuration으로 원하는 분석 체크가능

* CI(Continuous Integration) : 하나로 합칠 때 문제가 되는데 코드를 작성할 때 마다 바로바로 합치자는 것이 CI이다.
-------------------------------
* 빌드란

원시파일 - 컴파일러(compile) - 오브젝트파일(.class) - 링커 - 실행파일(.jar)

인텔리제이에서 개발자가 작성한 소스코드(.java)는 사람은 해석할 수 있지만, 기계는 알아들을 수 없기에 이를 원시파일 이라고 합니다.
이를 컴퓨터가 알아들을 수 있게 바이너리 파일로 만들어주는 과정을 컴파일 이라고 합니다.
컴파일을 거치게 되면 컴퓨터가 알아들을 수 있는 바이너리 형태의 오브젝트 파일(.class) 이 나오게 됩니다.
오브젝트 파일이 컴퓨터가 알아들을 수 있다고 해서 바로 실행할 수 있는 것은 아닙니다.
프로그래밍을 할 때, 다른 외부 라이브러리, 함수 등등의 다른 리소스를 사용하기 때문에 이러한 리소스를 연결시켜주는 과정이 필요한데 이를 링크 라고 합니다.
자바의 경우에는 다른 언어와 다르게 별도의 링크과정이 존재하지 않고, 런타임에 필요한 클래스들이 자바 가상기계에 링크되며 클래스 로더가 동적으로 필요한 클래스를 로딩합니다.
이렇게 링크를 통해 실행파일(.jar) 이 나오게 됩니다.
빌드란 사람들이 알아들을 수 있는 형태의 원시파일을 실제 컴퓨터에서 실행할 수 있게끔 만드는 이 일련의 과정을 빌드 라고 합니다.
정리하자면, 컴파일은 빌드 안의 부분집합 입니다.

즉, 실행가능한 파일로 만드는 과정을 빌드라고 한다.

빌드 -> 테스트 -> 통합 -> 배포
 |-----(CI)-----|    (CD)

위와 같은 것을 제공해주는 툴이 젠킨스, GitLab 

-------------------------------
#)Jenkins(정적분석 리포팅, 지속적통합) -> 빌드,테스트,통합,배포 
빌드와 테스트를 지원하는 천개넘는 플러그인이 제공된다.
장점은 확장성인데 개발언어에 따라서 플러그인을 맞춰주면 최적화된 개발환경이 제공된다.
추가/변경된 코드를 자동으로 빌드한 후 테스트 후 공유 레포지토리에 병합


젠킨스를 설치하기 전에 톰캣서버가 실행되있어야한다. + JDK

젠킨스 설치후 포트를 정하면 localhost:8088 치면은 젠킨스 서버가 실행이 되고 젠킨스 페이지가 자동으로 열린다.
그 후, 관리자 비밀번호를 설정해야한다. C/ProgramData/Jenkins/.jenkins/secrets/initialAdminPassword 에 있는 거 그대로 넣기
그 다음 install suggested plugins 선택 -> 플러그인 설치가 끝나면 계정 설정 창이 나온다. -> 원하는 계정,암호
-> jenkins URL은 http://localhost:8088 로 하면 된다.
-> 여기까지하고 주소창입력하면 젠킨스서버가 구축된걸 볼 수 있다.
-> edinet edinet(계정 비밀번호)

=========================================================================





 


 

